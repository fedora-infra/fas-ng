[tox]
envlist = lint,format,licenses,bandit,covclean,{py36,py37}-{unittest,integration},covreport
isolated_build = true

[testenv]
passenv = HOME
setenv =
    SECURITAS_CONFIG_PATH={toxinidir}/securitas/tests/unit/securitas.cfg
sitepackages = False
deps = poetry>=1.0.0
commands =
    poetry install -q
    unittest: poetry run pytest -vv --cov --cov-append --cov-report= securitas/tests/unit {posargs}
    integration: poetry run pytest -vv --no-cov securitas/tests/integration {posargs}
depends =
    {py36,py37}: covclean
    covreport: py36-unittest,py37-unittest

[testenv:covreport]
basepython = python3.7
deps = coverage
skip_install = true
commands =
    coverage report -m
    coverage html

[testenv:covclean]
deps = coverage
skip_install = true
commands = coverage erase


[testenv:docs]
changedir = docs
deps = sphinx
whitelist_externals =
    mkdir
    rm
commands=
    mkdir -p _static
    rm -rf _build
    sphinx-build -W -b html -d {envtmpdir}/doctrees .  _build/html

[testenv:lint]
commands =
    poetry install -q
    poetry run flake8 {posargs}

[testenv:format]
commands =
    poetry install -q
    poetry run black --check {posargs:.}

[testenv:licenses]
commands =
    poetry install -q
    poetry export -f requirements.txt -o /tmp/securitas-requirements.txt
    poetry run liccheck -s .license_strategy.ini -r /tmp/securitas-requirements.txt
    rm -f /tmp/securitas-requirements.txt
whitelist_externals =
    rm

[testenv:bandit]
commands =
    poetry install -q
    poetry run bandit -r securitas/ -x securitas/tests/ -ll


[flake8]
show-source = True
max-line-length = 100
ignore = E203,E231,W503
exclude = .git,.tox,dist,*egg

[pytest]
testpaths = securitas/tests/unit/
